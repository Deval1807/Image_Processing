{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar\\\\Desktop\\\\Sensor\\\\my-app\\\\src\\\\components\\\\addnew.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Addnew = () => {\n  _s();\n  const webcamRef = useRef(null);\n  const [imgSrc, setImgSrc] = useState(null);\n  const [name, setName] = useState(\"\");\n  const capture = useCallback(async () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n    try {\n      const response = await fetch(\"http://localhost:3001/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: \"name\",\n          image: imageSrc\n        })\n      });\n      if (response.ok) {\n        console.log(\"Data uploaded successfully\");\n        // setImgSrc(imageSrc);\n      } else {\n        console.error(\"Failed to upload data\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading data\", error);\n    }\n  }, [webcamRef, name]);\n  const retake = () => {\n    setImgSrc(null);\n    setName(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [imgSrc ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgSrc,\n        alt: \"webcam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Webcam, {\n        height: 600,\n        width: 600,\n        ref: webcamRef,\n        screenshotFormat: \"image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-container\",\n      children: imgSrc ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: retake,\n        children: \"Retake photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: capture,\n        children: \"Capture photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Addnew, \"g9aMvwoUJPGe6LdbKaFR2KVmyBM=\");\n_c = Addnew;\nexport default Addnew;\nvar _c;\n$RefreshReg$(_c, \"Addnew\");","map":{"version":3,"names":["useCallback","useRef","useState","Webcam","jsxDEV","_jsxDEV","Addnew","_s","webcamRef","imgSrc","setImgSrc","name","setName","capture","imageSrc","current","getScreenshot","response","fetch","method","headers","body","JSON","stringify","image","ok","console","log","error","retake","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","height","width","ref","screenshotFormat","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/src/components/addnew.js"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nconst Addnew = () => {\r\n  const webcamRef = useRef(null);\r\n  const [imgSrc, setImgSrc] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const capture = useCallback(async () => {\r\n    const imageSrc = webcamRef.current.getScreenshot();\r\n    setImgSrc(imageSrc);\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/upload\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ name: \"name\", image: imageSrc }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(\"Data uploaded successfully\");\r\n        // setImgSrc(imageSrc);\r\n      } else {\r\n        console.error(\"Failed to upload data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading data\", error);\r\n    }\r\n  }, [webcamRef, name]);\r\n\r\n  const retake = () => {\r\n    setImgSrc(null);\r\n    setName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {imgSrc ? (\r\n        <div>\r\n          <img src={imgSrc} alt=\"webcam\" />\r\n          <p>Name: {name}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Webcam height={600} width={600} ref={webcamRef} screenshotFormat=\"image/jpeg\"/>\r\n          {/* <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Name\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          /> */}\r\n        </div>\r\n      )}\r\n      <div className=\"btn-container\">\r\n        {imgSrc ? (\r\n          <button onClick={retake}>Retake photo</button>\r\n        ) : (\r\n          <button onClick={capture}>Capture photo</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Addnew;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}