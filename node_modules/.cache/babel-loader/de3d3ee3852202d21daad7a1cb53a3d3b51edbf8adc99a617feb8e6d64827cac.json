{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar\\\\Desktop\\\\Sensor\\\\my-app\\\\src\\\\components\\\\compare.js\";\nimport React from 'react';\nimport KMeans from 'ml-kmeans';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ColorExtractor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.extractColorsFromImageBase64 = (imageBase64, numColors) => {\n      // Implement the logic to extract colors from the image base64 data\n      // For example:\n      // Decode the base64 image data and process it\n      console.log('Extracting colors from image base64...');\n      // Placeholder return value\n      return [{\n        percent: 20,\n        color: [255, 0, 0]\n      }, {\n        percent: 15,\n        color: [0, 255, 0]\n      }, {\n        percent: 10,\n        color: [0, 0, 255]\n      }];\n    };\n    this.calculateColorSimilarityFromBase64 = (imageBase64_1, imageBase64_2, numColors) => {\n      const colors1 = this.extractColorsFromImageBase64(imageBase64_1, numColors);\n      const colors2 = this.extractColorsFromImageBase64(imageBase64_2, numColors);\n\n      // Implement the logic to calculate color similarity\n      // For the sake of example, assume the result is 0.5\n      return 0.5;\n    };\n    this.calculateSimilarityPercentage = (emdDistance, maxDistance) => {\n      // Calculate the similarity percentage\n      const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\n      return similarityPercentage;\n    };\n  }\n  render() {\n    // Specify the base64 strings of your two images and the number of colors to extract\n    const imageBase64_1 = 'YOUR_BASE64_STRING_1';\n    const imageBase64_2 = 'YOUR_BASE64_STRING_2';\n    const numColors = 5; // You can change this to the desired number of colors\n\n    const maxPossibleDistance = 10.0;\n    const similarityScore = this.calculateColorSimilarityFromBase64(imageBase64_1, imageBase64_2, numColors);\n    console.log(`Similarity Score: ${similarityScore.toFixed(2)}`);\n    const similarityPercentage = this.calculateSimilarityPercentage(similarityScore, maxPossibleDistance);\n    console.log(`Similarity Percentage: ${similarityPercentage.toFixed(2)}%`);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Check the console for the similarity score and percentage.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default ColorExtractor;","map":{"version":3,"names":["React","KMeans","jsxDEV","_jsxDEV","ColorExtractor","Component","constructor","args","extractColorsFromImageBase64","imageBase64","numColors","console","log","percent","color","calculateColorSimilarityFromBase64","imageBase64_1","imageBase64_2","colors1","colors2","calculateSimilarityPercentage","emdDistance","maxDistance","similarityPercentage","render","maxPossibleDistance","similarityScore","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/src/components/compare.js"],"sourcesContent":["import React from 'react';\r\nimport KMeans from 'ml-kmeans';\r\n\r\nclass ColorExtractor extends React.Component {\r\n  extractColorsFromImageBase64 = (imageBase64, numColors) => {\r\n    // Implement the logic to extract colors from the image base64 data\r\n    // For example:\r\n    // Decode the base64 image data and process it\r\n    console.log('Extracting colors from image base64...');\r\n    // Placeholder return value\r\n    return [\r\n      { percent: 20, color: [255, 0, 0] },\r\n      { percent: 15, color: [0, 255, 0] },\r\n      { percent: 10, color: [0, 0, 255] },\r\n    ];\r\n  };\r\n\r\n  calculateColorSimilarityFromBase64 = (imageBase64_1, imageBase64_2, numColors) => {\r\n    const colors1 = this.extractColorsFromImageBase64(imageBase64_1, numColors);\r\n    const colors2 = this.extractColorsFromImageBase64(imageBase64_2, numColors);\r\n\r\n    // Implement the logic to calculate color similarity\r\n    // For the sake of example, assume the result is 0.5\r\n    return 0.5;\r\n  };\r\n\r\n  calculateSimilarityPercentage = (emdDistance, maxDistance) => {\r\n    // Calculate the similarity percentage\r\n    const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\r\n\r\n    return similarityPercentage;\r\n  };\r\n\r\n  render() {\r\n    // Specify the base64 strings of your two images and the number of colors to extract\r\n    const imageBase64_1 = 'YOUR_BASE64_STRING_1';\r\n    const imageBase64_2 = 'YOUR_BASE64_STRING_2';\r\n    const numColors = 5; // You can change this to the desired number of colors\r\n\r\n    const maxPossibleDistance = 10.0;\r\n\r\n    const similarityScore = this.calculateColorSimilarityFromBase64(\r\n      imageBase64_1,\r\n      imageBase64_2,\r\n      numColors\r\n    );\r\n    console.log(`Similarity Score: ${similarityScore.toFixed(2)}`);\r\n\r\n    const similarityPercentage = this.calculateSimilarityPercentage(similarityScore, maxPossibleDistance);\r\n\r\n    console.log(`Similarity Percentage: ${similarityPercentage.toFixed(2)}%`);\r\n\r\n    return <div>Check the console for the similarity score and percentage.</div>;\r\n  }\r\n}\r\n\r\nexport default ColorExtractor;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,SAASJ,KAAK,CAACK,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC3CC,4BAA4B,GAAG,CAACC,WAAW,EAAEC,SAAS,KAAK;MACzD;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD;MACA,OAAO,CACL;QAAEC,OAAO,EAAE,EAAE;QAAEC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;MAAE,CAAC,EACnC;QAAED,OAAO,EAAE,EAAE;QAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;MAAE,CAAC,EACnC;QAAED,OAAO,EAAE,EAAE;QAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG;MAAE,CAAC,CACpC;IACH,CAAC;IAAA,KAEDC,kCAAkC,GAAG,CAACC,aAAa,EAAEC,aAAa,EAAEP,SAAS,KAAK;MAChF,MAAMQ,OAAO,GAAG,IAAI,CAACV,4BAA4B,CAACQ,aAAa,EAAEN,SAAS,CAAC;MAC3E,MAAMS,OAAO,GAAG,IAAI,CAACX,4BAA4B,CAACS,aAAa,EAAEP,SAAS,CAAC;;MAE3E;MACA;MACA,OAAO,GAAG;IACZ,CAAC;IAAA,KAEDU,6BAA6B,GAAG,CAACC,WAAW,EAAEC,WAAW,KAAK;MAC5D;MACA,MAAMC,oBAAoB,GAAG,GAAG,IAAI,CAAC,GAAGF,WAAW,GAAGC,WAAW,CAAC;MAElE,OAAOC,oBAAoB;IAC7B,CAAC;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP;IACA,MAAMR,aAAa,GAAG,sBAAsB;IAC5C,MAAMC,aAAa,GAAG,sBAAsB;IAC5C,MAAMP,SAAS,GAAG,CAAC,CAAC,CAAC;;IAErB,MAAMe,mBAAmB,GAAG,IAAI;IAEhC,MAAMC,eAAe,GAAG,IAAI,CAACX,kCAAkC,CAC7DC,aAAa,EACbC,aAAa,EACbP,SACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAAE,qBAAoBc,eAAe,CAACC,OAAO,CAAC,CAAC,CAAE,EAAC,CAAC;IAE9D,MAAMJ,oBAAoB,GAAG,IAAI,CAACH,6BAA6B,CAACM,eAAe,EAAED,mBAAmB,CAAC;IAErGd,OAAO,CAACC,GAAG,CAAE,0BAAyBW,oBAAoB,CAACI,OAAO,CAAC,CAAC,CAAE,GAAE,CAAC;IAEzE,oBAAOxB,OAAA;MAAAyB,QAAA,EAAK;IAA0D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9E;AACF;AAEA,eAAe5B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}