{"ast":null,"code":"module.exports = function (cv) {\n  function reshapeRectAtBorders(rect, imgDim) {\n    const newX = Math.min(Math.max(0, rect.x), imgDim.cols);\n    const newY = Math.min(Math.max(0, rect.y), imgDim.rows);\n    return new cv.Rect(newX, newY, Math.min(rect.width, imgDim.cols - newX), Math.min(rect.height, imgDim.rows - newY));\n  }\n  function getDefaultTextParams() {\n    return {\n      fontType: cv.FONT_HERSHEY_SIMPLEX,\n      fontSize: 0.8,\n      thickness: 2,\n      lineType: cv.LINE_4\n    };\n  }\n  function insertText(boxImg, text, {\n    x,\n    y\n  }, opts) {\n    const {\n      fontType,\n      fontSize,\n      color,\n      thickness,\n      lineType\n    } = Object.assign({}, getDefaultTextParams(), {\n      color: new cv.Vec(255, 255, 255)\n    }, opts);\n    boxImg.putText(text, new cv.Point(x, y), fontType, fontSize, color, thickness, lineType, 0);\n    return boxImg;\n  }\n  function getTextSize(text, opts) {\n    const {\n      fontType,\n      fontSize,\n      thickness\n    } = Object.assign({}, getDefaultTextParams(), opts);\n    const {\n      size,\n      baseLine\n    } = cv.getTextSize(text, fontType, fontSize, thickness);\n    return {\n      width: size.width,\n      height: size.height,\n      baseLine\n    };\n  }\n  function getMaxWidth(textLines) {\n    const getTextWidth = (text, opts) => getTextSize(text, opts).width;\n    return textLines.reduce((maxWidth, t) => {\n      const w = getTextWidth(t.text, t);\n      return maxWidth < w ? w : maxWidth;\n    }, 0);\n  }\n  function getBaseLine(textLine) {\n    return getTextSize(textLine.text, textLine).baseLine;\n  }\n  function getLineHeight(textLine) {\n    return getTextSize(textLine.text, textLine).height;\n  }\n  function getTextHeight(textLines) {\n    return textLines.reduce((height, t) => height + getLineHeight(t), 0);\n  }\n  function drawTextBox(img, upperLeft, textLines, alpha) {\n    const padding = 10;\n    const linePadding = 10;\n    const {\n      x,\n      y\n    } = upperLeft;\n    const rect = reshapeRectAtBorders(new cv.Rect(x, y, getMaxWidth(textLines) + 2 * padding, getTextHeight(textLines) + 2 * padding + (textLines.length - 1) * linePadding), img);\n    const boxImg = img.getRegion(rect).mul(alpha);\n    let pt = new cv.Point(padding, padding);\n    textLines.forEach((textLine, lineNumber) => {\n      const opts = Object.assign({}, getDefaultTextParams(), textLine);\n      pt = pt.add(new cv.Point(0, getLineHeight(textLine)));\n      insertText(boxImg, textLine.text, pt, opts);\n      pt = pt.add(new cv.Point(0, linePadding));\n    });\n    boxImg.copyTo(img.getRegion(rect));\n    return img;\n  }\n  function drawDetection(img, inputRect, opts = {}) {\n    const rect = inputRect.toSquare();\n    const {\n      x,\n      y,\n      width,\n      height\n    } = rect;\n    const segmentLength = width / (opts.segmentFraction || 6);\n    const upperLeft = new cv.Point(x, y);\n    const bottomLeft = new cv.Point(x, y + height);\n    const upperRight = new cv.Point(x + width, y);\n    const bottomRight = new cv.Point(x + width, y + height);\n    const drawParams = Object.assign({}, {\n      thickness: 2\n    }, opts);\n    img.drawLine(upperLeft, upperLeft.add(new cv.Point(0, segmentLength)), drawParams);\n    img.drawLine(upperLeft, upperLeft.add(new cv.Point(segmentLength, 0)), drawParams);\n    img.drawLine(bottomLeft, bottomLeft.add(new cv.Point(0, -segmentLength)), drawParams);\n    img.drawLine(bottomLeft, bottomLeft.add(new cv.Point(segmentLength, 0)), drawParams);\n    img.drawLine(upperRight, upperRight.add(new cv.Point(0, segmentLength)), drawParams);\n    img.drawLine(upperRight, upperRight.add(new cv.Point(-segmentLength, 0)), drawParams);\n    img.drawLine(bottomRight, bottomRight.add(new cv.Point(0, -segmentLength)), drawParams);\n    img.drawLine(bottomRight, bottomRight.add(new cv.Point(-segmentLength, 0)), drawParams);\n    return rect;\n  }\n  return {\n    drawTextBox,\n    drawDetection\n  };\n};","map":{"version":3,"names":["module","exports","cv","reshapeRectAtBorders","rect","imgDim","newX","Math","min","max","x","cols","newY","y","rows","Rect","width","height","getDefaultTextParams","fontType","FONT_HERSHEY_SIMPLEX","fontSize","thickness","lineType","LINE_4","insertText","boxImg","text","opts","color","Object","assign","Vec","putText","Point","getTextSize","size","baseLine","getMaxWidth","textLines","getTextWidth","reduce","maxWidth","t","w","getBaseLine","textLine","getLineHeight","getTextHeight","drawTextBox","img","upperLeft","alpha","padding","linePadding","length","getRegion","mul","pt","forEach","lineNumber","add","copyTo","drawDetection","inputRect","toSquare","segmentLength","segmentFraction","bottomLeft","upperRight","bottomRight","drawParams","drawLine"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/node_modules/opencv4nodejs/lib/src/drawUtils.js"],"sourcesContent":["module.exports = function(cv) {\r\n  function reshapeRectAtBorders(rect, imgDim) {\r\n    const newX = Math.min(Math.max(0, rect.x), imgDim.cols)\r\n    const newY = Math.min(Math.max(0, rect.y), imgDim.rows)\r\n    return new cv.Rect(\r\n      newX,\r\n      newY,\r\n      Math.min(rect.width, imgDim.cols - newX),\r\n      Math.min(rect.height, imgDim.rows - newY)\r\n    )\r\n  }\r\n\r\n  function getDefaultTextParams() {\r\n    return ({\r\n      fontType: cv.FONT_HERSHEY_SIMPLEX,\r\n      fontSize: 0.8,\r\n      thickness: 2,\r\n      lineType: cv.LINE_4\r\n    })\r\n  }\r\n\r\n  function insertText(boxImg, text, { x, y }, opts) {\r\n    const {\r\n      fontType,\r\n      fontSize,\r\n      color,\r\n      thickness,\r\n      lineType\r\n    } = Object.assign(\r\n      {},\r\n      getDefaultTextParams(),\r\n      { color: new cv.Vec(255, 255, 255) },\r\n      opts\r\n    )\r\n\r\n    boxImg.putText(\r\n      text,\r\n      new cv.Point(x, y),\r\n      fontType,\r\n      fontSize,\r\n      color,\r\n      thickness,\r\n      lineType,\r\n      0\r\n    )\r\n    return boxImg\r\n  }\r\n\r\n  function getTextSize(text, opts) {\r\n    const {\r\n      fontType,\r\n      fontSize,\r\n      thickness\r\n    } = Object.assign({}, getDefaultTextParams(), opts)\r\n\r\n    const { size, baseLine } = cv.getTextSize(text, fontType, fontSize, thickness)\r\n    return { width: size.width, height: size.height, baseLine }\r\n  }\r\n\r\n  function getMaxWidth(textLines) {\r\n    const getTextWidth = (text, opts) => getTextSize(text, opts).width\r\n    return textLines.reduce((maxWidth, t) => {\r\n      const w = getTextWidth(t.text, t)\r\n      return (maxWidth < w ? w : maxWidth)\r\n    }, 0)\r\n  }\r\n\r\n  function getBaseLine(textLine) {\r\n    return getTextSize(textLine.text, textLine).baseLine\r\n  }\r\n\r\n  function getLineHeight(textLine) {\r\n    return getTextSize(textLine.text, textLine).height\r\n  }\r\n\r\n  function getTextHeight(textLines) {\r\n    return textLines.reduce(\r\n      (height, t) => height + getLineHeight(t),\r\n      0\r\n    )\r\n  }\r\n\r\n  function drawTextBox(img, upperLeft, textLines, alpha) {\r\n    const padding = 10\r\n    const linePadding = 10\r\n\r\n    const { x, y } = upperLeft\r\n    const rect = reshapeRectAtBorders(\r\n      new cv.Rect(\r\n        x,\r\n        y,\r\n        getMaxWidth(textLines) + (2 * padding),\r\n        getTextHeight(textLines) + (2 * padding) + ((textLines.length - 1) * linePadding)\r\n      ),\r\n      img\r\n    )\r\n\r\n    const boxImg = img.getRegion(rect).mul(alpha)\r\n    let pt = new cv.Point(padding, padding)\r\n    textLines.forEach(\r\n      (textLine, lineNumber) => {\r\n        const opts = Object.assign(\r\n          {},\r\n          getDefaultTextParams(),\r\n          textLine\r\n        )\r\n\r\n        pt = pt.add(new cv.Point(0, getLineHeight(textLine)))\r\n\r\n        insertText(\r\n          boxImg,\r\n          textLine.text,\r\n          pt,\r\n          opts\r\n        )\r\n\r\n        pt = pt.add(new cv.Point(0, linePadding))\r\n      }\r\n    )\r\n    boxImg.copyTo(img.getRegion(rect))\r\n    return img\r\n  }\r\n\r\n  function drawDetection(img, inputRect, opts = {}) {\r\n    const rect = inputRect.toSquare()\r\n\r\n    const { x, y, width, height } = rect\r\n\r\n    const segmentLength = width / (opts.segmentFraction || 6);\r\n    const upperLeft = new cv.Point(x, y)\r\n    const bottomLeft = new cv.Point(x, y + height)\r\n    const upperRight = new cv.Point(x + width, y)\r\n    const bottomRight = new cv.Point(x + width, y + height)\r\n\r\n    const drawParams = Object.assign(\r\n      {},\r\n      { thickness: 2 },\r\n      opts\r\n    )\r\n\r\n    img.drawLine(\r\n      upperLeft,\r\n      upperLeft.add(new cv.Point(0, segmentLength)),\r\n      drawParams\r\n    )\r\n    img.drawLine(\r\n      upperLeft,\r\n      upperLeft.add(new cv.Point(segmentLength, 0)),\r\n      drawParams\r\n    )\r\n\r\n    img.drawLine(\r\n      bottomLeft,\r\n      bottomLeft.add(new cv.Point(0, -segmentLength)),\r\n      drawParams\r\n    )\r\n    img.drawLine(\r\n      bottomLeft,\r\n      bottomLeft.add(new cv.Point(segmentLength, 0)),\r\n      drawParams\r\n    )\r\n\r\n    img.drawLine(\r\n      upperRight,\r\n      upperRight.add(new cv.Point(0, segmentLength)),\r\n      drawParams\r\n    )\r\n    img.drawLine(\r\n      upperRight,\r\n      upperRight.add(new cv.Point(-segmentLength, 0)),\r\n      drawParams\r\n    )\r\n\r\n    img.drawLine(\r\n      bottomRight,\r\n      bottomRight.add(new cv.Point(0, -segmentLength)),\r\n      drawParams\r\n    )\r\n    img.drawLine(\r\n      bottomRight,\r\n      bottomRight.add(new cv.Point(-segmentLength, 0)),\r\n      drawParams\r\n    )\r\n    return rect\r\n  }\r\n\r\n  return ({\r\n    drawTextBox,\r\n    drawDetection\r\n  })\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}