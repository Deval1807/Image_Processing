{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto'\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const {\n    rows,\n    columns\n  } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (num >= 0 && padMinus ? ` ${formatNumber2(num, maxNumSize - 1)}` : formatNumber2(num, maxNumSize)).padEnd(maxNumSize);\n}\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (fix.length <= len && !fix.startsWith('0.000') && !fix.startsWith('-0.000')) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~this.get(i, j));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError('vector size must be the same as the number of columns');\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / cols) / cols);\n    }\n  }\n  return variance;\n}\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / rows) / rows);\n    }\n  }\n  return variance;\n}\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - sum1 * sum1 / size) / (size - 1);\n  } else {\n    return (sum2 - sum1 * sum1 / size) / size;\n  }\n}\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      random = Math.random\n    } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      min = 0,\n      max = 1000,\n      random = Math.random\n    } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n  get size() {\n    return this.rows * this.columns;\n  }\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n  toJSON() {\n    return this.to2DArray();\n  }\n  isRowVector() {\n    return this.rows === 1;\n  }\n  isColumnVector() {\n    return this.columns === 1;\n  }\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n  isSquare() {\n    return this.rows === this.columns;\n  }\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      rows = 1,\n      columns = 1\n    } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n  neg() {\n    return this.mulS(-1);\n  }\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row':\n        {\n          const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max[row]) {\n                max[row] = this.get(row, column);\n              }\n            }\n          }\n          return max;\n        }\n      case 'column':\n        {\n          const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max[column]) {\n                max[column] = this.get(row, column);\n              }\n            }\n          }\n          return max;\n        }\n      case undefined:\n        {\n          let max = this.get(0, 0);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max) {\n                max = this.get(row, column);\n              }\n            }\n          }\n          return max;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row':\n        {\n          const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min[row]) {\n                min[row] = this.get(row, column);\n              }\n            }\n          }\n          return min;\n        }\n      case 'column':\n        {\n          const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min[column]) {\n                min[column] = this.get(row, column);\n              }\n            }\n          }\n          return min;\n        }\n      case undefined:\n        {\n          let min = this.get(0, 0);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min) {\n                min = this.get(row, column);\n              }\n            }\n          }\n          return min;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n    let result = new Matrix(m, p);\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n      let m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols);\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, {\n          min,\n          max,\n          output: row\n        });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n      throw new RangeError('Argument out of range');\n    }\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n      throw new RangeError('Argument out of range');\n    }\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row':\n        {\n          for (let i = 0; i < this.rows; i++) {\n            sum[i] /= this.columns;\n          }\n          return sum;\n        }\n      case 'column':\n        {\n          for (let i = 0; i < this.columns; i++) {\n            sum[i] /= this.rows;\n          }\n          return sum;\n        }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      unbiased = true,\n      mean = this.mean(by)\n    } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row':\n        {\n          if (!isAnyArray.isAnyArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n          return varianceByRow(this, unbiased, mean);\n        }\n      case 'column':\n        {\n          if (!isAnyArray.isAnyArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n          return varianceByColumn(this, unbiased, mean);\n        }\n      case undefined:\n        {\n          if (typeof mean !== 'number') {\n            throw new TypeError('mean must be a number');\n          }\n          return varianceAll(this, unbiased, mean);\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      center = this.mean(by)\n    } = options;\n    switch (by) {\n      case 'row':\n        {\n          if (!isAnyArray.isAnyArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n          centerByRow(this, center);\n          return this;\n        }\n      case 'column':\n        {\n          if (!isAnyArray.isAnyArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n          centerByColumn(this, center);\n          return this;\n        }\n      case undefined:\n        {\n          if (typeof center !== 'number') {\n            throw new TypeError('center must be a number');\n          }\n          centerAll(this, center);\n          return this;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row':\n        {\n          if (scale === undefined) {\n            scale = getScaleByRow(this);\n          } else if (!isAnyArray.isAnyArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n          scaleByRow(this, scale);\n          return this;\n        }\n      case 'column':\n        {\n          if (scale === undefined) {\n            scale = getScaleByColumn(this);\n          } else if (!isAnyArray.isAnyArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n          scaleByColumn(this, scale);\n          return this;\n        }\n      case undefined:\n        {\n          if (scale === undefined) {\n            scale = getScaleAll(this);\n          } else if (typeof scale !== 'number') {\n            throw new TypeError('scale must be a number');\n          }\n          scaleAll(this, scale);\n          return this;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\nfunction compareNumbers(a, b) {\n  return a - b;\n}\nfunction isArrayOfNumbers(array) {\n  return array.every(element => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\nclass Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\ninstallMathOperations(AbstractMatrix, Matrix);\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n  }\n}\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n  }\n}\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const {\n      rows = 1\n    } = options;\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n    LUcolj = new Float64Array(rows);\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n        pivotSign = -pivotSign;\n      }\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n    let lu = this.LU;\n    let rows = lu.rows;\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n    let qr = this.QR;\n    let m = qr.rows;\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n    let m = value.rows;\n    let n = value.columns;\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha = Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n      k++;\n      switch (kase) {\n        case 1:\n          {\n            let f = e[p - 2];\n            e[p - 2] = 0;\n            for (let j = p - 2; j >= k; j--) {\n              let t = hypotenuse(s[j], f);\n              let cs = s[j] / t;\n              let sn = f / t;\n              s[j] = t;\n              if (j !== k) {\n                f = -sn * e[j - 1];\n                e[j - 1] = cs * e[j - 1];\n              }\n              if (wantv) {\n                for (let i = 0; i < n; i++) {\n                  t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                  V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                  V.set(i, j, t);\n                }\n              }\n            }\n            break;\n          }\n        case 2:\n          {\n            let f = e[k - 1];\n            e[k - 1] = 0;\n            for (let j = k; j < p; j++) {\n              let t = hypotenuse(s[j], f);\n              let cs = s[j] / t;\n              let sn = f / t;\n              s[j] = t;\n              f = -sn * e[j];\n              e[j] = cs * e[j];\n              if (wantu) {\n                for (let i = 0; i < m; i++) {\n                  t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                  U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                  U.set(i, j, t);\n                }\n              }\n            }\n            break;\n          }\n        case 3:\n          {\n            const scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));\n            const sp = s[p - 1] / scale;\n            const spm1 = s[p - 2] / scale;\n            const epm1 = e[p - 2] / scale;\n            const sk = s[k] / scale;\n            const ek = e[k] / scale;\n            const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n            const c = sp * epm1 * (sp * epm1);\n            let shift = 0;\n            if (b !== 0 || c !== 0) {\n              if (b < 0) {\n                shift = 0 - Math.sqrt(b * b + c);\n              } else {\n                shift = Math.sqrt(b * b + c);\n              }\n              shift = c / (b + shift);\n            }\n            let f = (sk + sp) * (sk - sp) + shift;\n            let g = sk * ek;\n            for (let j = k; j < p - 1; j++) {\n              let t = hypotenuse(f, g);\n              if (t === 0) t = Number.MIN_VALUE;\n              let cs = f / t;\n              let sn = g / t;\n              if (j !== k) {\n                e[j - 1] = t;\n              }\n              f = cs * s[j] + sn * e[j];\n              e[j] = cs * e[j] - sn * s[j];\n              g = sn * s[j + 1];\n              s[j + 1] = cs * s[j + 1];\n              if (wantv) {\n                for (let i = 0; i < n; i++) {\n                  t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                  V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                  V.set(i, j, t);\n                }\n              }\n              t = hypotenuse(f, g);\n              if (t === 0) t = Number.MIN_VALUE;\n              cs = f / t;\n              sn = g / t;\n              s[j] = t;\n              f = cs * e[j] + sn * s[j + 1];\n              s[j + 1] = -sn * e[j] + cs * s[j + 1];\n              g = sn * e[j + 1];\n              e[j + 1] = cs * e[j + 1];\n              if (wantu && j < m - 1) {\n                for (let i = 0; i < m; i++) {\n                  t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                  U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                  U.set(i, j, t);\n                }\n              }\n            }\n            e[p - 2] = f;\n            break;\n          }\n        case 4:\n          {\n            if (s[k] <= 0) {\n              s[k] = s[k] < 0 ? -s[k] : 0;\n              if (wantv) {\n                for (let i = 0; i <= pp; i++) {\n                  V.set(i, k, -V.get(i, k));\n                }\n              }\n            }\n            while (k < pp) {\n              if (s[k] >= s[k + 1]) {\n                break;\n              }\n              let t = s[k];\n              s[k] = s[k + 1];\n              s[k + 1] = t;\n              if (wantv && k < n - 1) {\n                for (let i = 0; i < n; i++) {\n                  t = V.get(i, k + 1);\n                  V.set(i, k + 1, V.get(i, k));\n                  V.set(i, k, t);\n                }\n              }\n              if (wantu && k < m - 1) {\n                for (let i = 0; i < m; i++) {\n                  t = U.get(i, k + 1);\n                  U.set(i, k + 1, U.get(i, k));\n                  U.set(i, k, t);\n                }\n              }\n              k++;\n            }\n            p--;\n            break;\n          }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n    let U = this.U;\n    let V = this.rightSingularVectors;\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n    return VLU.mmul(Y);\n  }\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n    let U = this.U;\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n    return Y;\n  }\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n  get norm2() {\n    return this.s[0];\n  }\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n  get diagonal() {\n    return Array.from(this.s);\n  }\n  get threshold() {\n    return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n  }\n  get leftSingularVectors() {\n    return this.U;\n  }\n  get rightSingularVectors() {\n    return this.V;\n  }\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n      return a * determinant(subMatrix0) - b * determinant(subMatrix1) + c * determinant(subMatrix2);\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\nfunction dependenciesOneRow(error, matrix, index, thresholdValue = 10e-10, thresholdError = 10e-10) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\nfunction linearDependencies(matrix, options = {}) {\n  const {\n    thresholdValue = 10e-10,\n    thresholdError = 10e-10\n  } = options;\n  matrix = Matrix.checkMatrix(matrix);\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(i, dependenciesOneRow(error, x, i, thresholdValue, thresholdError));\n  }\n  return results;\n}\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, {\n    autoTranspose: true\n  });\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !isAnyArray.isAnyArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const {\n    center = true\n  } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !isAnyArray.isAnyArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const {\n    center = true,\n    scale = true\n  } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n  const sdx = xMatrix.standardDeviation('column', {\n    unbiased: true\n  });\n  const sdy = yIsSame ? sdx : yMatrix.standardDeviation('column', {\n    unbiased: true\n  });\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(i, j, corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return corr;\n}\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const {\n      assumeSymmetric = false\n    } = options;\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n  e[n - 1] = 0;\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n    if (m > l) {\n      do {\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n        f = f + h;\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n        p = -s * s2 * c3 * el1 * e[l] / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n      iter = iter + 1;\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H.get(m - 1, m - 1)) + Math.abs(z) + Math.abs(H.get(m + 1, m + 1))))) {\n          break;\n        }\n        m--;\n      }\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n        if (x === 0) {\n          break;\n        }\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n  if (norm === 0) {\n    return;\n  }\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(i + 1, n, Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z);\n          }\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n        w = H.get(i, i) - p;\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n            }\n            cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(i + 1, n - 1, (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x);\n              H.set(i + 1, n, (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x);\n            } else {\n              cdivres = cdiv(-r - y * H.get(i, n - 1), -s - y * H.get(i, n), z, q);\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n      d = a.get(j, j) - d;\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    let l = this.L;\n    let dimension = l.rows;\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n    return B;\n  }\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let {\n      Y\n    } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10\n    } = options;\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n    let diff = 1;\n    let t, q, w, tOld;\n    for (let counter = 0; counter < maxIterations && diff > terminationCriteria; counter++) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()));\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;","map":{"version":3,"names":["Object","defineProperty","exports","value","isAnyArray","require","rescale","indent","repeat","indentData","inspectMatrix","inspectMatrixWithOptions","matrix","options","maxRows","maxColumns","maxNumSize","padMinus","constructor","name","inspectData","rows","columns","maxI","Math","min","maxJ","result","loop","i","j","get","line","push","formatNumber","join","length","num","formatNumber2","padEnd","len","str","toString","fix","toFixed","max","startsWith","exp","toExponential","slice","installMathOperations","AbstractMatrix","Matrix","prototype","add","addS","addM","set","checkMatrix","RangeError","newMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","pow","arg0","powS","powM","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","TypeError","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","arguments","checkNumber","newArray","array","checkNonEmpty","isEmpty","Error","sumByRow","sum","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","centerByColumn","centerAll","getScaleByRow","scale","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","from1DArray","newRows","newColumns","newData","row","column","rowVector","columnVector","zeros","ones","fill","rand","random","randInt","Number","isInteger","interval","eye","undefined","diag","data","l","matrix1","matrix2","isMatrix","klass","apply","callback","call","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","factor","reducedEchelonForm","m","n","maxRow","p","pivot","setSubMatrix","neg","getRow","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","NaN","Array","NEGATIVE_INFINITY","maxIndex","idx","POSITIVE_INFINITY","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","dot","cumulativeSum","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","console","warn","embed","mat","r","c","resultat","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","output","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","product","standardDeviation","center","Symbol","for","isArrayOfNumbers","every","element","randomInt","diagonal","identity","negate","tensorProduct","nRows","nColumns","arrayData","from","removeRow","splice","addRow","removeColumn","newRow","addColumn","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","lu","pivotVector","pivotSign","t","LUcolj","kmax","LU","isSingular","col","solve","count","X","determinant","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","orthogonalMatrix","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","e","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","condition","norm2","rank","tol","ii","leftSingularVectors","diagonalMatrix","useSVD","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","thresholdError","returnArray","linearDependencies","results","Abis","svd","pseudoInverse","svdSolution","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","tred2","tql2","H","ort","orthes","hqr2","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","hh","dl1","c3","el1","s2","tst1","low","high","nn","exshift","z","iter","w","ra","sa","vr","vi","notlast","cdivres","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","diff","tOld","counter","xResidual","residual","yResidual","betas","CHO","EVD","NIPALS","Nipals","SVD","default"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/node_modules/ml-matrix/matrix.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}