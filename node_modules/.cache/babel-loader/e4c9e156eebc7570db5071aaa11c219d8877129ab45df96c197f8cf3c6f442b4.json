{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar\\\\Desktop\\\\Sensor\\\\my-app\\\\src\\\\components\\\\compare.js\";\nimport React from 'react';\nimport { wassersteinDistance } from 'scipy';\nimport KMeans from 'ml-kmeans';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ColorExtractor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.extractColorsFromImageBase64 = (imageBase64, numColors) => {\n      // Write your logic here to extract colors from the image base64 data\n      // For example:\n      console.log('Extracting colors from image base64...');\n    };\n    this.calculateColorSimilarityFromBase64 = (imageBase64_1, imageBase64_2, numColors) => {\n      const colors1 = this.extractColorsFromImageBase64(imageBase64_1, numColors);\n      const colors2 = this.extractColorsFromImageBase64(imageBase64_2, numColors);\n\n      // Extract color histograms\n      const hist1 = colors1.map(color => color.percent);\n      const hist2 = colors2.map(color => color.percent);\n\n      // Calculate Earth Mover's Distance (EMD) between the histograms\n      const emd_distance = wassersteinDistance(hist1, hist2);\n\n      // The smaller the EMD distance, the more similar the images are\n      return emd_distance;\n    };\n    this.calculateSimilarityPercentage = (emdDistance, maxDistance) => {\n      // Calculate the similarity percentage\n      const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\n      return similarityPercentage;\n    };\n  }\n  render() {\n    // Specify the base64 strings of your two images and the number of colors to extract\n    const imageBase64_1 = 'YOUR_BASE64_STRING_1';\n    const imageBase64_2 = 'YOUR_BASE64_STRING_2';\n    const numColors = 5; // You can change this to the desired number of colors\n\n    const maxPossibleDistance = 10.0;\n    const similarityScore = this.calculateColorSimilarityFromBase64(imageBase64_1, imageBase64_2, numColors);\n    console.log(`Similarity Score: ${similarityScore.toFixed(2)}`);\n    const similarityPercentage = this.calculateSimilarityPercentage(similarityScore, maxPossibleDistance);\n    console.log(`Similarity Percentage: ${similarityPercentage.toFixed(2)}%`);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Check the console for the similarity score and percentage.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default ColorExtractor;","map":{"version":3,"names":["React","wassersteinDistance","KMeans","jsxDEV","_jsxDEV","ColorExtractor","Component","constructor","args","extractColorsFromImageBase64","imageBase64","numColors","console","log","calculateColorSimilarityFromBase64","imageBase64_1","imageBase64_2","colors1","colors2","hist1","map","color","percent","hist2","emd_distance","calculateSimilarityPercentage","emdDistance","maxDistance","similarityPercentage","render","maxPossibleDistance","similarityScore","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/src/components/compare.js"],"sourcesContent":["import React from 'react';\r\nimport { wassersteinDistance } from 'scipy';\r\nimport KMeans from 'ml-kmeans';\r\n\r\nclass ColorExtractor extends React.Component {\r\n  extractColorsFromImageBase64 = (imageBase64, numColors) => {\r\n    // Write your logic here to extract colors from the image base64 data\r\n    // For example:\r\n    console.log('Extracting colors from image base64...');\r\n  };\r\n\r\n  calculateColorSimilarityFromBase64 = (imageBase64_1, imageBase64_2, numColors) => {\r\n    const colors1 = this.extractColorsFromImageBase64(imageBase64_1, numColors);\r\n    const colors2 = this.extractColorsFromImageBase64(imageBase64_2, numColors);\r\n\r\n    // Extract color histograms\r\n    const hist1 = colors1.map((color) => color.percent);\r\n    const hist2 = colors2.map((color) => color.percent);\r\n\r\n    // Calculate Earth Mover's Distance (EMD) between the histograms\r\n    const emd_distance = wassersteinDistance(hist1, hist2);\r\n\r\n    // The smaller the EMD distance, the more similar the images are\r\n    return emd_distance;\r\n  };\r\n\r\n  calculateSimilarityPercentage = (emdDistance, maxDistance) => {\r\n    // Calculate the similarity percentage\r\n    const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\r\n\r\n    return similarityPercentage;\r\n  };\r\n\r\n  render() {\r\n    // Specify the base64 strings of your two images and the number of colors to extract\r\n    const imageBase64_1 = 'YOUR_BASE64_STRING_1';\r\n    const imageBase64_2 = 'YOUR_BASE64_STRING_2';\r\n    const numColors = 5; // You can change this to the desired number of colors\r\n\r\n    const maxPossibleDistance = 10.0;\r\n\r\n    const similarityScore = this.calculateColorSimilarityFromBase64(\r\n      imageBase64_1,\r\n      imageBase64_2,\r\n      numColors\r\n    );\r\n    console.log(`Similarity Score: ${similarityScore.toFixed(2)}`);\r\n\r\n    const similarityPercentage = this.calculateSimilarityPercentage(similarityScore, maxPossibleDistance);\r\n\r\n    console.log(`Similarity Percentage: ${similarityPercentage.toFixed(2)}%`);\r\n\r\n    return <div>Check the console for the similarity score and percentage.</div>;\r\n  }\r\n}\r\n\r\nexport default ColorExtractor;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,SAASL,KAAK,CAACM,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC3CC,4BAA4B,GAAG,CAACC,WAAW,EAAEC,SAAS,KAAK;MACzD;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACvD,CAAC;IAAA,KAEDC,kCAAkC,GAAG,CAACC,aAAa,EAAEC,aAAa,EAAEL,SAAS,KAAK;MAChF,MAAMM,OAAO,GAAG,IAAI,CAACR,4BAA4B,CAACM,aAAa,EAAEJ,SAAS,CAAC;MAC3E,MAAMO,OAAO,GAAG,IAAI,CAACT,4BAA4B,CAACO,aAAa,EAAEL,SAAS,CAAC;;MAE3E;MACA,MAAMQ,KAAK,GAAGF,OAAO,CAACG,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC;MACnD,MAAMC,KAAK,GAAGL,OAAO,CAACE,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC;;MAEnD;MACA,MAAME,YAAY,GAAGvB,mBAAmB,CAACkB,KAAK,EAAEI,KAAK,CAAC;;MAEtD;MACA,OAAOC,YAAY;IACrB,CAAC;IAAA,KAEDC,6BAA6B,GAAG,CAACC,WAAW,EAAEC,WAAW,KAAK;MAC5D;MACA,MAAMC,oBAAoB,GAAG,GAAG,IAAI,CAAC,GAAGF,WAAW,GAAGC,WAAW,CAAC;MAElE,OAAOC,oBAAoB;IAC7B,CAAC;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP;IACA,MAAMd,aAAa,GAAG,sBAAsB;IAC5C,MAAMC,aAAa,GAAG,sBAAsB;IAC5C,MAAML,SAAS,GAAG,CAAC,CAAC,CAAC;;IAErB,MAAMmB,mBAAmB,GAAG,IAAI;IAEhC,MAAMC,eAAe,GAAG,IAAI,CAACjB,kCAAkC,CAC7DC,aAAa,EACbC,aAAa,EACbL,SACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAAE,qBAAoBkB,eAAe,CAACC,OAAO,CAAC,CAAC,CAAE,EAAC,CAAC;IAE9D,MAAMJ,oBAAoB,GAAG,IAAI,CAACH,6BAA6B,CAACM,eAAe,EAAED,mBAAmB,CAAC;IAErGlB,OAAO,CAACC,GAAG,CAAE,0BAAyBe,oBAAoB,CAACI,OAAO,CAAC,CAAC,CAAE,GAAE,CAAC;IAEzE,oBAAO5B,OAAA;MAAA6B,QAAA,EAAK;IAA0D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9E;AACF;AAEA,eAAehC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}