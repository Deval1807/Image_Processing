{"ast":null,"code":"var clean = require('./clean');\nmodule.exports = Engine = {};\nEngine.runPython = function (operation, a, b, cb, x, y) {\n  if (operation === 'local' || operation === 'global') {\n    var cleanup = clean.cleanMin(operation, a, b, cb);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'nnls') {\n    cb = clean.cleanCB(cb);\n    a = JSON.stringify(a);\n    b = JSON.stringify(b);\n  } else if (operation === 'fit') {\n    var cleanup = clean.cleanFit(a, b, cb, x, y);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'root') {\n    var cleanup = clean.cleanRoot(a, b, cb, x, y);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'vectorRoot') {\n    var cleanup = clean.cleanVector(a, b, cb, x);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'derivative') {\n    var cleanup = clean.cleanDerivative(a, b, cb, x);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  }\n\n  // don't need to worry about race conditions with async process below\n  // since each is wrapped in their own \"runPython\" closure\n  var python = require('child_process').spawn('python', [__dirname + '/../py/exec.py', operation, a, b]);\n  var output = '';\n  python.stdout.on('data', function (data) {\n    output += data;\n  });\n  python.stdout.on('close', function () {\n    try {\n      cb(JSON.parse(output));\n    } catch (e) {\n      cb(output);\n    }\n  });\n};","map":{"version":3,"names":["clean","require","module","exports","Engine","runPython","operation","a","b","cb","x","y","cleanup","cleanMin","func","JSON","stringify","options","callback","cleanCB","cleanFit","cleanRoot","cleanVector","cleanDerivative","python","spawn","__dirname","output","stdout","on","data","parse","e"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/node_modules/scipy/optimize/node/engine.js"],"sourcesContent":["var clean = require('./clean');\n\nmodule.exports = Engine = {};\n\nEngine.runPython = function(operation, a, b, cb, x, y) {\n  if (operation === 'local' || operation === 'global') {\n    var cleanup = clean.cleanMin(operation, a, b, cb);\n    a   = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb  = cleanup.callback;\n  } else if (operation === 'nnls') {\n    cb = clean.cleanCB(cb);\n    a = JSON.stringify(a);\n    b = JSON.stringify(b);\n  } else if (operation === 'fit') {\n    var cleanup = clean.cleanFit(a, b, cb, x, y);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'root') {\n    var cleanup = clean.cleanRoot(a, b, cb, x, y);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'vectorRoot') {\n    var cleanup = clean.cleanVector(a, b, cb, x);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'derivative') {\n    var cleanup = clean.cleanDerivative(a, b, cb, x);\n    a = cleanup.func;\n    b = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  }\n\n  // don't need to worry about race conditions with async process below\n  // since each is wrapped in their own \"runPython\" closure\n  var python = require('child_process').spawn(\n  'python',\n  [__dirname + '/../py/exec.py', operation, a, b]);\n  var output = '';\n  python.stdout.on('data', function (data){\n    output += data;\n  });\n  python.stdout.on('close', function (){\n    try {\n      cb(JSON.parse(output));\n    } catch (e) {\n      cb(output);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}