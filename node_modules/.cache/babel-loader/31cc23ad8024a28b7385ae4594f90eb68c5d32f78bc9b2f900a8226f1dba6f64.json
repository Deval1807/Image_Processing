{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar\\\\Desktop\\\\Sensor\\\\my-app\\\\src\\\\components\\\\compare.js\";\nimport React from 'react';\nimport cv2 from 'opencv'; // Make sure to include the appropriate library\nimport { KMeans } from 'scikit-learn'; // Make sure to include the appropriate library\nimport { wasserstein_distance } from 'scipy.stats'; // Make sure to include the appropriate library\nimport base64 from 'base-64';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExampleComponent = () => {\n  const extractColorsFromImageBase64 = (imageBase64, numColors) => {\n    const image_data = base64.decode(imageBase64);\n    const image_np = new np.frombuffer(image_data, np.uint8);\n    const image = cv2.imdecode(image_np, cv2.IMREAD_COLOR);\n    const hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV);\n    const pixels = hsv_image.reshape(-1, 3);\n    const kmeans = new KMeans(numColors);\n    kmeans.fit(pixels);\n    const cluster_centers = kmeans.cluster_centers_;\n    const labels = kmeans.labels_;\n    const counts = new np.bincount(labels);\n    const percentages = counts / counts.sum() * 100;\n    const color_data = percentages.map((percent, i) => ({\n      percent,\n      color: cluster_centers[i]\n    }));\n    color_data.sort((a, b) => b.percent - a.percent);\n    return color_data;\n  };\n  const calculateColorSimilarityFromBase64 = (imageBase641, imageBase642, numColors) => {\n    const colors1 = extractColorsFromImageBase64(imageBase641, numColors);\n    const colors2 = extractColorsFromImageBase64(imageBase642, numColors);\n    const hist1 = colors1.map(color => color.percent);\n    const hist2 = colors2.map(color => color.percent);\n    const emd_distance = wasserstein_distance(hist1, hist2);\n    return emd_distance;\n  };\n  const calculateSimilarityPercentage = (emdDistance, maxDistance) => {\n    const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\n    return similarityPercentage;\n  };\n\n  // Specify the base64 strings of your two images and the number of colors to extract\n  const image_base64_1 = 'YOUR_BASE64_STRING_1';\n  const image_base64_2 = 'YOUR_BASE64_STRING_2';\n  const num_colors = 5; // You can change this to the desired number of colors\n\n  const max_possible_distance = 10.0;\n  const similarity_score = calculateColorSimilarityFromBase64(image_base64_1, image_base64_2, num_colors);\n  console.log(`Similarity Score: ${similarity_score.toFixed(2)}`);\n  const similarity_percentage = calculateSimilarityPercentage(similarity_score, max_possible_distance);\n  console.log(`Similarity Percentage: ${similarity_percentage.toFixed(2)}%`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Image Similarity Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Similarity Score: \", similarity_score.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Similarity Percentage: \", similarity_percentage.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_c = ExampleComponent;\nexport default ExampleComponent;\nvar _c;\n$RefreshReg$(_c, \"ExampleComponent\");","map":{"version":3,"names":["React","cv2","KMeans","wasserstein_distance","base64","useEffect","useState","jsxDEV","_jsxDEV","ExampleComponent","extractColorsFromImageBase64","imageBase64","numColors","image_data","decode","image_np","np","frombuffer","uint8","image","imdecode","IMREAD_COLOR","hsv_image","cvtColor","COLOR_BGR2HSV","pixels","reshape","kmeans","fit","cluster_centers","cluster_centers_","labels","labels_","counts","bincount","percentages","sum","color_data","map","percent","i","color","sort","a","b","calculateColorSimilarityFromBase64","imageBase641","imageBase642","colors1","colors2","hist1","hist2","emd_distance","calculateSimilarityPercentage","emdDistance","maxDistance","similarityPercentage","image_base64_1","image_base64_2","num_colors","max_possible_distance","similarity_score","console","log","toFixed","similarity_percentage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/src/components/compare.js"],"sourcesContent":["import React from 'react';\r\nimport cv2 from 'opencv'; // Make sure to include the appropriate library\r\nimport { KMeans } from 'scikit-learn'; // Make sure to include the appropriate library\r\nimport { wasserstein_distance } from 'scipy.stats'; // Make sure to include the appropriate library\r\nimport base64 from 'base-64';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst ExampleComponent = () => {\r\n  const extractColorsFromImageBase64 = (imageBase64, numColors) => {\r\n    const image_data = base64.decode(imageBase64);\r\n    const image_np = new np.frombuffer(image_data, np.uint8);\r\n    const image = cv2.imdecode(image_np, cv2.IMREAD_COLOR);\r\n\r\n    const hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV);\r\n\r\n    const pixels = hsv_image.reshape(-1, 3);\r\n\r\n    const kmeans = new KMeans(numColors);\r\n    kmeans.fit(pixels);\r\n\r\n    const cluster_centers = kmeans.cluster_centers_;\r\n    const labels = kmeans.labels_;\r\n\r\n    const counts = new np.bincount(labels);\r\n\r\n    const percentages = (counts / counts.sum()) * 100;\r\n\r\n    const color_data = percentages.map((percent, i) => ({\r\n      percent,\r\n      color: cluster_centers[i],\r\n    }));\r\n\r\n    color_data.sort((a, b) => b.percent - a.percent);\r\n\r\n    return color_data;\r\n  };\r\n\r\n  const calculateColorSimilarityFromBase64 = (imageBase641, imageBase642, numColors) => {\r\n    const colors1 = extractColorsFromImageBase64(imageBase641, numColors);\r\n    const colors2 = extractColorsFromImageBase64(imageBase642, numColors);\r\n\r\n    const hist1 = colors1.map((color) => color.percent);\r\n    const hist2 = colors2.map((color) => color.percent);\r\n\r\n    const emd_distance = wasserstein_distance(hist1, hist2);\r\n\r\n    return emd_distance;\r\n  };\r\n\r\n  const calculateSimilarityPercentage = (emdDistance, maxDistance) => {\r\n    const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\r\n\r\n    return similarityPercentage;\r\n  };\r\n\r\n  // Specify the base64 strings of your two images and the number of colors to extract\r\n  const image_base64_1 = 'YOUR_BASE64_STRING_1';\r\n  const image_base64_2 = 'YOUR_BASE64_STRING_2';\r\n  const num_colors = 5; // You can change this to the desired number of colors\r\n\r\n  const max_possible_distance = 10.0;\r\n\r\n  const similarity_score = calculateColorSimilarityFromBase64(image_base64_1, image_base64_2, num_colors);\r\n  console.log(`Similarity Score: ${similarity_score.toFixed(2)}`);\r\n\r\n  const similarity_percentage = calculateSimilarityPercentage(similarity_score, max_possible_distance);\r\n\r\n  console.log(`Similarity Percentage: ${similarity_percentage.toFixed(2)}%`);\r\n\r\n  return (\r\n    <div>\r\n    <h2>Image Similarity Analysis</h2>\r\n    <p>Similarity Score: {similarity_score.toFixed(2)}</p>\r\n    <p>Similarity Percentage: {similarity_percentage.toFixed(2)}%</p>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default ExampleComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}