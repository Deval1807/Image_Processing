{"ast":null,"code":"var parse = require('./parse');\nvar globalDefaults = {\n  guess: 0,\n  iterations: 100,\n  temperature: 1.0,\n  stepSize: 0.5,\n  includeAllMinsFound: false,\n  interval: 50\n};\nvar extendNoOverwrite = function (obj, defaults) {\n  for (key in defaults) {\n    if (obj[key] === undefined) {\n      obj[key] = defaults[key];\n    }\n  }\n};\nvar optionalArgs = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  // provide default callback function (console.log)\n  callback = cleanInputs.cleanCB(callback);\n  options = options || {};\n  return {\n    callback: callback,\n    options: options\n  };\n};\nvar cleanInputs = module.exports = {\n  cleanMin: function (operation, func, options, callback) {\n    var optional = optionalArgs(options, callback);\n    options = optional.options;\n    callback = optional.callback;\n\n    // clean provided function to be accepted by sympy lambdify function\n    func = parse.cleanFunc(func, options.variable, false).func;\n    // provide sensible defaults for the options object\n    if (operation === 'local') {\n      options = {\n        bracket: null,\n        method: 'Brent',\n        bounds: options.bounds,\n        tol: null,\n        options: null\n      };\n      if (Array.isArray(options.bounds) && options.bounds.length === 2) {\n        options.method = 'Bounded';\n      } else {\n        options.bounds = null;\n        options.method = 'Brent';\n      }\n    } else if (operation === 'global') {\n      extendNoOverwrite(options, globalDefaults);\n    }\n    return {\n      func: func,\n      options: options,\n      callback: callback\n    };\n  },\n  cleanFit: function (func, options, callback, xData, yData) {\n    var optional = optionalArgs(options, callback);\n    options = optional.options;\n    callback = optional.callback;\n    options.xData = xData;\n    options.yData = yData;\n    f = parse.cleanFunc(func, options.variables, true);\n    options.numArgs = f.numArgs;\n    func = f.func;\n    return {\n      func: func,\n      options: options,\n      callback: callback\n    };\n  },\n  cleanRoot: function (func, options, callback, lower, upper) {\n    var optional = optionalArgs(options, callback);\n    options = optional.options;\n    callback = optional.callback;\n    options.lower = lower;\n    options.upper = upper;\n    options.method = options.method || 'brentq';\n    func = parse.cleanFunc(func, options.variable, false).func;\n    return {\n      func: func,\n      options: options,\n      callback: callback\n    };\n  },\n  cleanVector: function (func, options, callback, guess) {\n    var optional = optionalArgs(options, callback);\n    options = optional.options;\n    callback = optional.callback;\n    options.guess = guess;\n    func = parse.cleanFunc(func, options.variable, false).func;\n    return {\n      func: func,\n      options: options,\n      callback: callback\n    };\n  },\n  cleanDerivative: function (func, options, callback, point) {\n    var optional = optionalArgs(options, callback);\n    options = optional.options;\n    callback = optional.callback;\n    options.point = point;\n    options.epsilon = options.epsilon || Math.pow(10, -9);\n    func = parse.cleanFunc(func, options.variable, false).func;\n    return {\n      func: func,\n      options: options,\n      callback: callback\n    };\n  },\n  cleanCB: function (callback) {\n    return callback || function (results) {\n      console.log(results);\n    };\n  }\n};","map":{"version":3,"names":["parse","require","globalDefaults","guess","iterations","temperature","stepSize","includeAllMinsFound","interval","extendNoOverwrite","obj","defaults","key","undefined","optionalArgs","options","callback","cleanInputs","cleanCB","module","exports","cleanMin","operation","func","optional","cleanFunc","variable","bracket","method","bounds","tol","Array","isArray","length","cleanFit","xData","yData","f","variables","numArgs","cleanRoot","lower","upper","cleanVector","cleanDerivative","point","epsilon","Math","pow","results","console","log"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/node_modules/scipy/optimize/node/clean.js"],"sourcesContent":["var parse = require('./parse');\n\nvar globalDefaults = {\n  guess:               0,\n  iterations:          100,\n  temperature:         1.0,\n  stepSize:            0.5,\n  includeAllMinsFound: false,\n  interval:            50\n};\n\nvar extendNoOverwrite = function (obj, defaults){\n  for (key in defaults) {\n    if (obj[key] === undefined) {\n      obj[key] = defaults[key];\n    }\n  }\n}\n\nvar optionalArgs = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  // provide default callback function (console.log)\n  callback = cleanInputs.cleanCB(callback);\n\n  options = options || {};\n\n  return {\n    callback: callback,\n    options: options\n  };\n};\n\nvar cleanInputs = module.exports = {\n  cleanMin: function (operation, func, options, callback) {\n    var optional = optionalArgs(options, callback);\n    options  = optional.options;\n    callback = optional.callback;\n\n    // clean provided function to be accepted by sympy lambdify function\n    func = parse.cleanFunc(func, options.variable, false).func;\n    // provide sensible defaults for the options object\n    if (operation === 'local') {\n      options = {\n        bracket: null,\n        method: 'Brent',\n        bounds: options.bounds,\n        tol: null,\n        options: null\n      }\n\n      if (Array.isArray(options.bounds) && options.bounds.length === 2) {\n        options.method = 'Bounded';\n      } else {\n        options.bounds = null;\n        options.method = 'Brent';\n      }\n    } else if (operation === 'global') {\n      extendNoOverwrite(options, globalDefaults);\n    }\n\n    return {\n      func:     func,\n      options:  options,\n      callback: callback\n    }\n  },\n\n  cleanFit: function(func, options, callback, xData, yData) {\n    var optional = optionalArgs(options, callback);\n    options  = optional.options;\n    callback = optional.callback;\n\n    options.xData = xData;\n    options.yData = yData;\n\n    f = parse.cleanFunc(func, options.variables, true);\n    options.numArgs = f.numArgs;\n    func = f.func;\n\n    return {\n      func:     func,\n      options:  options,\n      callback: callback\n    }\n  },\n\n  cleanRoot: function(func, options, callback, lower, upper) {\n    var optional = optionalArgs(options, callback);\n    options  = optional.options;\n    callback = optional.callback;\n\n    options.lower = lower;\n    options.upper = upper;\n    options.method = options.method || 'brentq'\n\n    func = parse.cleanFunc(func, options.variable, false).func;\n\n    return {\n      func:     func,\n      options:  options,\n      callback: callback\n    }\n  },\n\n  cleanVector: function(func, options, callback, guess) {\n    var optional = optionalArgs(options, callback);\n    options  = optional.options;\n    callback = optional.callback;\n\n    options.guess = guess;\n\n    func = parse.cleanFunc(func, options.variable, false).func;\n\n    return {\n      func:     func,\n      options:  options,\n      callback: callback\n    }\n  },\n\n  cleanDerivative: function(func, options, callback, point) {\n    var optional = optionalArgs(options, callback);\n    options  = optional.options;\n    callback = optional.callback;\n\n    options.point = point;\n    options.epsilon = options.epsilon || Math.pow(10, -9);\n\n    func = parse.cleanFunc(func, options.variable, false).func;\n    return {\n      func:     func,\n      options:  options,\n      callback: callback\n    }\n  },\n\n  cleanCB: function (callback){\n    return callback || function (results){\n      console.log(results);\n    };\n  }\n}"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE9B,IAAIC,cAAc,GAAG;EACnBC,KAAK,EAAgB,CAAC;EACtBC,UAAU,EAAW,GAAG;EACxBC,WAAW,EAAU,GAAG;EACxBC,QAAQ,EAAa,GAAG;EACxBC,mBAAmB,EAAE,KAAK;EAC1BC,QAAQ,EAAa;AACvB,CAAC;AAED,IAAIC,iBAAiB,GAAG,SAAAA,CAAUC,GAAG,EAAEC,QAAQ,EAAC;EAC9C,KAAKC,GAAG,IAAID,QAAQ,EAAE;IACpB,IAAID,GAAG,CAACE,GAAG,CAAC,KAAKC,SAAS,EAAE;MAC1BH,GAAG,CAACE,GAAG,CAAC,GAAGD,QAAQ,CAACC,GAAG,CAAC;IAC1B;EACF;AACF,CAAC;AAED,IAAIE,YAAY,GAAG,SAAAA,CAAUC,OAAO,EAAEC,QAAQ,EAAE;EAC9C,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;IACjCC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAGF,SAAS;EACrB;EACA;EACAG,QAAQ,GAAGC,WAAW,CAACC,OAAO,CAACF,QAAQ,CAAC;EAExCD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,OAAO;IACLC,QAAQ,EAAEA,QAAQ;IAClBD,OAAO,EAAEA;EACX,CAAC;AACH,CAAC;AAED,IAAIE,WAAW,GAAGE,MAAM,CAACC,OAAO,GAAG;EACjCC,QAAQ,EAAE,SAAAA,CAAUC,SAAS,EAAEC,IAAI,EAAER,OAAO,EAAEC,QAAQ,EAAE;IACtD,IAAIQ,QAAQ,GAAGV,YAAY,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC9CD,OAAO,GAAIS,QAAQ,CAACT,OAAO;IAC3BC,QAAQ,GAAGQ,QAAQ,CAACR,QAAQ;;IAE5B;IACAO,IAAI,GAAGvB,KAAK,CAACyB,SAAS,CAACF,IAAI,EAAER,OAAO,CAACW,QAAQ,EAAE,KAAK,CAAC,CAACH,IAAI;IAC1D;IACA,IAAID,SAAS,KAAK,OAAO,EAAE;MACzBP,OAAO,GAAG;QACRY,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,OAAO;QACfC,MAAM,EAAEd,OAAO,CAACc,MAAM;QACtBC,GAAG,EAAE,IAAI;QACTf,OAAO,EAAE;MACX,CAAC;MAED,IAAIgB,KAAK,CAACC,OAAO,CAACjB,OAAO,CAACc,MAAM,CAAC,IAAId,OAAO,CAACc,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;QAChElB,OAAO,CAACa,MAAM,GAAG,SAAS;MAC5B,CAAC,MAAM;QACLb,OAAO,CAACc,MAAM,GAAG,IAAI;QACrBd,OAAO,CAACa,MAAM,GAAG,OAAO;MAC1B;IACF,CAAC,MAAM,IAAIN,SAAS,KAAK,QAAQ,EAAE;MACjCb,iBAAiB,CAACM,OAAO,EAAEb,cAAc,CAAC;IAC5C;IAEA,OAAO;MACLqB,IAAI,EAAMA,IAAI;MACdR,OAAO,EAAGA,OAAO;MACjBC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EAEDkB,QAAQ,EAAE,SAAAA,CAASX,IAAI,EAAER,OAAO,EAAEC,QAAQ,EAAEmB,KAAK,EAAEC,KAAK,EAAE;IACxD,IAAIZ,QAAQ,GAAGV,YAAY,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC9CD,OAAO,GAAIS,QAAQ,CAACT,OAAO;IAC3BC,QAAQ,GAAGQ,QAAQ,CAACR,QAAQ;IAE5BD,OAAO,CAACoB,KAAK,GAAGA,KAAK;IACrBpB,OAAO,CAACqB,KAAK,GAAGA,KAAK;IAErBC,CAAC,GAAGrC,KAAK,CAACyB,SAAS,CAACF,IAAI,EAAER,OAAO,CAACuB,SAAS,EAAE,IAAI,CAAC;IAClDvB,OAAO,CAACwB,OAAO,GAAGF,CAAC,CAACE,OAAO;IAC3BhB,IAAI,GAAGc,CAAC,CAACd,IAAI;IAEb,OAAO;MACLA,IAAI,EAAMA,IAAI;MACdR,OAAO,EAAGA,OAAO;MACjBC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EAEDwB,SAAS,EAAE,SAAAA,CAASjB,IAAI,EAAER,OAAO,EAAEC,QAAQ,EAAEyB,KAAK,EAAEC,KAAK,EAAE;IACzD,IAAIlB,QAAQ,GAAGV,YAAY,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC9CD,OAAO,GAAIS,QAAQ,CAACT,OAAO;IAC3BC,QAAQ,GAAGQ,QAAQ,CAACR,QAAQ;IAE5BD,OAAO,CAAC0B,KAAK,GAAGA,KAAK;IACrB1B,OAAO,CAAC2B,KAAK,GAAGA,KAAK;IACrB3B,OAAO,CAACa,MAAM,GAAGb,OAAO,CAACa,MAAM,IAAI,QAAQ;IAE3CL,IAAI,GAAGvB,KAAK,CAACyB,SAAS,CAACF,IAAI,EAAER,OAAO,CAACW,QAAQ,EAAE,KAAK,CAAC,CAACH,IAAI;IAE1D,OAAO;MACLA,IAAI,EAAMA,IAAI;MACdR,OAAO,EAAGA,OAAO;MACjBC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EAED2B,WAAW,EAAE,SAAAA,CAASpB,IAAI,EAAER,OAAO,EAAEC,QAAQ,EAAEb,KAAK,EAAE;IACpD,IAAIqB,QAAQ,GAAGV,YAAY,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC9CD,OAAO,GAAIS,QAAQ,CAACT,OAAO;IAC3BC,QAAQ,GAAGQ,QAAQ,CAACR,QAAQ;IAE5BD,OAAO,CAACZ,KAAK,GAAGA,KAAK;IAErBoB,IAAI,GAAGvB,KAAK,CAACyB,SAAS,CAACF,IAAI,EAAER,OAAO,CAACW,QAAQ,EAAE,KAAK,CAAC,CAACH,IAAI;IAE1D,OAAO;MACLA,IAAI,EAAMA,IAAI;MACdR,OAAO,EAAGA,OAAO;MACjBC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EAED4B,eAAe,EAAE,SAAAA,CAASrB,IAAI,EAAER,OAAO,EAAEC,QAAQ,EAAE6B,KAAK,EAAE;IACxD,IAAIrB,QAAQ,GAAGV,YAAY,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC9CD,OAAO,GAAIS,QAAQ,CAACT,OAAO;IAC3BC,QAAQ,GAAGQ,QAAQ,CAACR,QAAQ;IAE5BD,OAAO,CAAC8B,KAAK,GAAGA,KAAK;IACrB9B,OAAO,CAAC+B,OAAO,GAAG/B,OAAO,CAAC+B,OAAO,IAAIC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAErDzB,IAAI,GAAGvB,KAAK,CAACyB,SAAS,CAACF,IAAI,EAAER,OAAO,CAACW,QAAQ,EAAE,KAAK,CAAC,CAACH,IAAI;IAC1D,OAAO;MACLA,IAAI,EAAMA,IAAI;MACdR,OAAO,EAAGA,OAAO;MACjBC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EAEDE,OAAO,EAAE,SAAAA,CAAUF,QAAQ,EAAC;IAC1B,OAAOA,QAAQ,IAAI,UAAUiC,OAAO,EAAC;MACnCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACtB,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}