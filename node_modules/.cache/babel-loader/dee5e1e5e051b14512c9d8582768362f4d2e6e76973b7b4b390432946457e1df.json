{"ast":null,"code":"var clean = require('./clean');\nmodule.exports = Engine = {};\nEngine.runPython = function (operation, func, options, cb, a, b) {\n  if (operation === 'single') {\n    var cleanup = clean.cleanSingle(func, options, cb, a, b);\n    func = cleanup.func;\n    options = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  } else if (operation === 'multi') {\n    var cleanup = clean.cleanMulti(func, options, cb, a);\n    func = cleanup.func;\n    options = JSON.stringify(cleanup.options);\n    cb = cleanup.callback;\n  }\n\n  // don't need to worry about race conditions with async process below\n  // since each is wrapped in their own \"runPython\" closure\n  var python = require('child_process').spawn('python', [__dirname + '/../py/exec.py', operation, func, options]);\n  var output = '';\n  python.stdout.on('data', function (data) {\n    output += data;\n  });\n  python.stdout.on('close', function () {\n    try {\n      cb(JSON.parse(output));\n    } catch (e) {\n      cb(output);\n    }\n  });\n};","map":{"version":3,"names":["clean","require","module","exports","Engine","runPython","operation","func","options","cb","a","b","cleanup","cleanSingle","JSON","stringify","callback","cleanMulti","python","spawn","__dirname","output","stdout","on","data","parse","e"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/node_modules/scipy/integrate/node/engine.js"],"sourcesContent":["var clean = require('./clean');\n\nmodule.exports = Engine = {};\n\nEngine.runPython = function (operation, func, options, cb, a, b){\n  if (operation === 'single') {\n    var cleanup = clean.cleanSingle(func, options, cb, a, b);\n    func    = cleanup.func;\n    options = JSON.stringify(cleanup.options);\n    cb      = cleanup.callback;\n  } else if (operation === 'multi') {\n    var cleanup = clean.cleanMulti(func, options, cb, a);\n    func    = cleanup.func;\n    options = JSON.stringify(cleanup.options);\n    cb      = cleanup.callback;\n  }\n\n  // don't need to worry about race conditions with async process below\n  // since each is wrapped in their own \"runPython\" closure\n  var python = require('child_process').spawn(\n    'python',\n    [__dirname + '/../py/exec.py', operation, func, options]);\n  var output = '';\n  python.stdout.on('data', function (data){\n    output += data;\n  });\n  python.stdout.on('close', function (){\n    try {\n      cb(JSON.parse(output));\n    } catch (e) {\n      cb(output);\n    }\n  });\n}\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE9BC,MAAM,CAACC,OAAO,GAAGC,MAAM,GAAG,CAAC,CAAC;AAE5BA,MAAM,CAACC,SAAS,GAAG,UAAUC,SAAS,EAAEC,IAAI,EAAEC,OAAO,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAC;EAC9D,IAAIL,SAAS,KAAK,QAAQ,EAAE;IAC1B,IAAIM,OAAO,GAAGZ,KAAK,CAACa,WAAW,CAACN,IAAI,EAAEC,OAAO,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACxDJ,IAAI,GAAMK,OAAO,CAACL,IAAI;IACtBC,OAAO,GAAGM,IAAI,CAACC,SAAS,CAACH,OAAO,CAACJ,OAAO,CAAC;IACzCC,EAAE,GAAQG,OAAO,CAACI,QAAQ;EAC5B,CAAC,MAAM,IAAIV,SAAS,KAAK,OAAO,EAAE;IAChC,IAAIM,OAAO,GAAGZ,KAAK,CAACiB,UAAU,CAACV,IAAI,EAAEC,OAAO,EAAEC,EAAE,EAAEC,CAAC,CAAC;IACpDH,IAAI,GAAMK,OAAO,CAACL,IAAI;IACtBC,OAAO,GAAGM,IAAI,CAACC,SAAS,CAACH,OAAO,CAACJ,OAAO,CAAC;IACzCC,EAAE,GAAQG,OAAO,CAACI,QAAQ;EAC5B;;EAEA;EACA;EACA,IAAIE,MAAM,GAAGjB,OAAO,CAAC,eAAe,CAAC,CAACkB,KAAK,CACzC,QAAQ,EACR,CAACC,SAAS,GAAG,gBAAgB,EAAEd,SAAS,EAAEC,IAAI,EAAEC,OAAO,CAAC,CAAC;EAC3D,IAAIa,MAAM,GAAG,EAAE;EACfH,MAAM,CAACI,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAAUC,IAAI,EAAC;IACtCH,MAAM,IAAIG,IAAI;EAChB,CAAC,CAAC;EACFN,MAAM,CAACI,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,YAAW;IACnC,IAAI;MACFd,EAAE,CAACK,IAAI,CAACW,KAAK,CAACJ,MAAM,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOK,CAAC,EAAE;MACVjB,EAAE,CAACY,MAAM,CAAC;IACZ;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}