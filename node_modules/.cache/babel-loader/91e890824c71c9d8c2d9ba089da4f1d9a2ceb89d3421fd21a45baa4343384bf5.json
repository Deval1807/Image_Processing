{"ast":null,"code":"const path = require('path');\nconst opencvBuild = require('opencv-build');\nconst {\n  resolvePath\n} = require('./commons');\nconst requirePath = path.join(__dirname, process.env.BINDINGS_DEBUG ? '../build/Debug/opencv4nodejs' : '../build/Release/opencv4nodejs');\nconst logDebug = process.env.OPENCV4NODES_DEBUG_REQUIRE ? require('npmlog').info : () => {};\nfunction tryGetOpencvBinDir() {\n  if (process.env.OPENCV_BIN_DIR) {\n    logDebug('tryGetOpencvBinDir', 'OPENCV_BIN_DIR environment variable is set');\n    return process.env.OPENCV_BIN_DIR;\n  }\n  // if the auto build is not disabled via environment do not even attempt\n  // to read package.json\n  if (!opencvBuild.isAutoBuildDisabled()) {\n    logDebug('tryGetOpencvBinDir', 'auto build has not been disabled via environment variable, using opencv bin dir of opencv-build');\n    return opencvBuild.opencvBinDir;\n  }\n  logDebug('tryGetOpencvBinDir', 'auto build has not been explicitly disabled via environment variable, attempting to read envs from package.json...');\n  const envs = opencvBuild.readEnvsFromPackageJson();\n  if (!envs.disableAutoBuild) {\n    logDebug('tryGetOpencvBinDir', 'auto build has not been disabled via package.json, using opencv bin dir of opencv-build');\n    return opencvBuild.opencvBinDir;\n  }\n  if (envs.opencvBinDir) {\n    logDebug('tryGetOpencvBinDir', 'found opencv binary environment variable in package.json');\n    return envs.opencvBinDir;\n  }\n  logDebug('tryGetOpencvBinDir', 'failed to find opencv binary environment variable in package.json');\n  return null;\n}\nlet cv = null;\ntry {\n  logDebug('require', 'require path is ' + requirePath);\n  cv = require(requirePath);\n} catch (err) {\n  logDebug('require', 'failed to require cv with exception: ' + err.toString());\n  logDebug('require', 'attempting to add opencv binaries to path');\n  if (!process.env.path) {\n    logDebug('require', 'there is no path environment variable, skipping...');\n    throw err;\n  }\n  const opencvBinDir = tryGetOpencvBinDir();\n  logDebug('require', 'adding opencv binary dir to path: ' + opencvBinDir);\n\n  // ensure binaries are added to path on windows\n  if (!process.env.path.includes(opencvBinDir)) {\n    process.env.path = `${process.env.path};${opencvBinDir};`;\n  }\n  logDebug('require', 'process.env.path: ' + process.env.path);\n  cv = require(requirePath);\n}\n\n// resolve haarcascade files\nconst {\n  haarCascades,\n  lbpCascades\n} = cv;\nObject.keys(haarCascades).forEach(key => cv[key] = resolvePath(path.join(__dirname, './haarcascades'), haarCascades[key]));\nObject.keys(lbpCascades).forEach(key => cv[key] = resolvePath(path.join(__dirname, './lbpcascades'), lbpCascades[key]));\nmodule.exports = cv;","map":{"version":3,"names":["path","require","opencvBuild","resolvePath","requirePath","join","__dirname","process","env","BINDINGS_DEBUG","logDebug","OPENCV4NODES_DEBUG_REQUIRE","info","tryGetOpencvBinDir","OPENCV_BIN_DIR","isAutoBuildDisabled","opencvBinDir","envs","readEnvsFromPackageJson","disableAutoBuild","cv","err","toString","includes","haarCascades","lbpCascades","Object","keys","forEach","key","module","exports"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/node_modules/opencv4nodejs/lib/cv.js"],"sourcesContent":["const path = require('path');\r\nconst opencvBuild = require('opencv-build');\r\nconst { resolvePath } = require('./commons');\r\n\r\nconst requirePath = path.join(__dirname, process.env.BINDINGS_DEBUG ? '../build/Debug/opencv4nodejs' : '../build/Release/opencv4nodejs')\r\n\r\nconst logDebug = process.env.OPENCV4NODES_DEBUG_REQUIRE ? require('npmlog').info : () => {}\r\n\r\nfunction tryGetOpencvBinDir() {\r\n  if (process.env.OPENCV_BIN_DIR) {\r\n    logDebug('tryGetOpencvBinDir', 'OPENCV_BIN_DIR environment variable is set')\r\n    return process.env.OPENCV_BIN_DIR\r\n  }\r\n  // if the auto build is not disabled via environment do not even attempt\r\n  // to read package.json\r\n  if (!opencvBuild.isAutoBuildDisabled()) {\r\n    logDebug('tryGetOpencvBinDir', 'auto build has not been disabled via environment variable, using opencv bin dir of opencv-build')\r\n    return opencvBuild.opencvBinDir\r\n  }\r\n\r\n  logDebug('tryGetOpencvBinDir', 'auto build has not been explicitly disabled via environment variable, attempting to read envs from package.json...')\r\n  const envs = opencvBuild.readEnvsFromPackageJson()\r\n\r\n  if (!envs.disableAutoBuild) {\r\n    logDebug('tryGetOpencvBinDir', 'auto build has not been disabled via package.json, using opencv bin dir of opencv-build')\r\n    return opencvBuild.opencvBinDir\r\n  }\r\n\r\n  if (envs.opencvBinDir) {\r\n    logDebug('tryGetOpencvBinDir', 'found opencv binary environment variable in package.json')\r\n    return envs.opencvBinDir\r\n  }\r\n  logDebug('tryGetOpencvBinDir', 'failed to find opencv binary environment variable in package.json')\r\n  return null\r\n}\r\n\r\nlet cv = null\r\ntry {\r\n  logDebug('require', 'require path is ' + requirePath)\r\n  cv = require(requirePath);\r\n} catch (err) {\r\n  logDebug('require', 'failed to require cv with exception: ' + err.toString())\r\n  logDebug('require', 'attempting to add opencv binaries to path')\r\n\r\n  if (!process.env.path) {\r\n    logDebug('require', 'there is no path environment variable, skipping...')\r\n    throw err\r\n  }\r\n\r\n  const opencvBinDir = tryGetOpencvBinDir()\r\n  logDebug('require', 'adding opencv binary dir to path: ' + opencvBinDir)\r\n\r\n  // ensure binaries are added to path on windows\r\n  if (!process.env.path.includes(opencvBinDir)) {\r\n    process.env.path = `${process.env.path};${opencvBinDir};`\r\n  }\r\n  logDebug('require', 'process.env.path: ' + process.env.path)\r\n  cv = require(requirePath);\r\n}\r\n\r\n// resolve haarcascade files\r\nconst { haarCascades, lbpCascades } = cv;\r\nObject.keys(haarCascades).forEach(\r\n  key => cv[key] = resolvePath(path.join(__dirname, './haarcascades'), haarCascades[key]));\r\nObject.keys(lbpCascades).forEach(\r\n  key => cv[key] = resolvePath(path.join(__dirname, './lbpcascades'), lbpCascades[key]));\r\n\r\nmodule.exports = cv;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}