{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar\\\\Desktop\\\\Sensor\\\\my-app\\\\src\\\\components\\\\compare.js\";\nimport React from 'react';\nimport cv2 from 'opencv4nodejs';\nimport * as np from 'numpy';\nimport KMeans from 'ml-kmeans';\nimport { wassersteinDistance } from 'scipy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ColorExtractor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.extractColorsFromImageBase64 = (imageBase64, numColors) => {\n      // Decode the base64 image data\n      const image_data = Buffer.from(imageBase64, 'base64');\n      const image_np = np.frombuffer(image_data, np.uint8);\n      const image = cv2.imdecode(image_np, cv2.IMREAD_COLOR);\n\n      // Convert the image to HSV color space\n      const hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV);\n\n      // Reshape the image to be a list of pixels\n      const pixels = hsv_image.reshape(-1, 3);\n\n      // Use K-Means clustering to group similar colors\n      const kmeans = new KMeans(numColors);\n      kmeans.fit(pixels);\n\n      // Calculate the percentage of each color cluster in the image\n      const cluster_centers = kmeans.cluster_centers;\n      const labels = kmeans.labels;\n\n      // Count the number of pixels in each cluster\n      const counts = np.bincount(labels);\n\n      // Get the percentage of each color\n      const percentages = counts / counts.sum() * 100;\n\n      // Sort the colors by percentage\n      const color_data = percentages.map((percent, index) => {\n        return {\n          percent,\n          color: cluster_centers[index]\n        };\n      });\n      color_data.sort((a, b) => b.percent - a.percent);\n      return color_data;\n    };\n    this.calculateColorSimilarityFromBase64 = (imageBase64_1, imageBase64_2, numColors) => {\n      const colors1 = this.extractColorsFromImageBase64(imageBase64_1, numColors);\n      const colors2 = this.extractColorsFromImageBase64(imageBase64_2, numColors);\n\n      // Extract color histograms\n      const hist1 = colors1.map(color => color.percent);\n      const hist2 = colors2.map(color => color.percent);\n\n      // Calculate Earth Mover's Distance (EMD) between the histograms\n      const emd_distance = wassersteinDistance(hist1, hist2);\n\n      // The smaller the EMD distance, the more similar the images are\n      return emd_distance;\n    };\n    this.calculateSimilarityPercentage = (emdDistance, maxDistance) => {\n      // Calculate the similarity percentage\n      const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\n      return similarityPercentage;\n    };\n  }\n  render() {\n    // Specify the base64 strings of your two images and the number of colors to extract\n    const imageBase64_1 = 'YOUR_BASE64_STRING_1';\n    const imageBase64_2 = 'YOUR_BASE64_STRING_2';\n    const numColors = 5; // You can change this to the desired number of colors\n\n    const maxPossibleDistance = 10.0;\n    const similarityScore = this.calculateColorSimilarityFromBase64(imageBase64_1, imageBase64_2, numColors);\n    console.log(`Similarity Score: ${similarityScore.toFixed(2)}`);\n    const similarityPercentage = this.calculateSimilarityPercentage(similarityScore, maxPossibleDistance);\n    console.log(`Similarity Percentage: ${similarityPercentage.toFixed(2)}%`);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Check the console for the similarity score and percentage.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default ColorExtractor;","map":{"version":3,"names":["React","cv2","np","KMeans","wassersteinDistance","jsxDEV","_jsxDEV","ColorExtractor","Component","constructor","args","extractColorsFromImageBase64","imageBase64","numColors","image_data","Buffer","from","image_np","frombuffer","uint8","image","imdecode","IMREAD_COLOR","hsv_image","cvtColor","COLOR_BGR2HSV","pixels","reshape","kmeans","fit","cluster_centers","labels","counts","bincount","percentages","sum","color_data","map","percent","index","color","sort","a","b","calculateColorSimilarityFromBase64","imageBase64_1","imageBase64_2","colors1","colors2","hist1","hist2","emd_distance","calculateSimilarityPercentage","emdDistance","maxDistance","similarityPercentage","render","maxPossibleDistance","similarityScore","console","log","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Sagar/Desktop/Sensor/my-app/src/components/compare.js"],"sourcesContent":["import React from 'react';\r\nimport cv2 from 'opencv4nodejs';\r\nimport * as np from 'numpy';\r\nimport KMeans from 'ml-kmeans';\r\nimport { wassersteinDistance } from 'scipy';\r\n\r\nclass ColorExtractor extends React.Component {\r\n  extractColorsFromImageBase64 = (imageBase64, numColors) => {\r\n    // Decode the base64 image data\r\n    const image_data = Buffer.from(imageBase64, 'base64');\r\n    const image_np = np.frombuffer(image_data, np.uint8);\r\n    const image = cv2.imdecode(image_np, cv2.IMREAD_COLOR);\r\n\r\n    // Convert the image to HSV color space\r\n    const hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV);\r\n\r\n    // Reshape the image to be a list of pixels\r\n    const pixels = hsv_image.reshape(-1, 3);\r\n\r\n    // Use K-Means clustering to group similar colors\r\n    const kmeans = new KMeans(numColors);\r\n    kmeans.fit(pixels);\r\n\r\n    // Calculate the percentage of each color cluster in the image\r\n    const cluster_centers = kmeans.cluster_centers;\r\n    const labels = kmeans.labels;\r\n\r\n    // Count the number of pixels in each cluster\r\n    const counts = np.bincount(labels);\r\n\r\n    // Get the percentage of each color\r\n    const percentages = (counts / counts.sum()) * 100;\r\n\r\n    // Sort the colors by percentage\r\n    const color_data = percentages.map((percent, index) => {\r\n      return { percent, color: cluster_centers[index] };\r\n    });\r\n    color_data.sort((a, b) => b.percent - a.percent);\r\n\r\n    return color_data;\r\n  };\r\n\r\n  calculateColorSimilarityFromBase64 = (imageBase64_1, imageBase64_2, numColors) => {\r\n    const colors1 = this.extractColorsFromImageBase64(imageBase64_1, numColors);\r\n    const colors2 = this.extractColorsFromImageBase64(imageBase64_2, numColors);\r\n\r\n    // Extract color histograms\r\n    const hist1 = colors1.map((color) => color.percent);\r\n    const hist2 = colors2.map((color) => color.percent);\r\n\r\n    // Calculate Earth Mover's Distance (EMD) between the histograms\r\n    const emd_distance = wassersteinDistance(hist1, hist2);\r\n\r\n    // The smaller the EMD distance, the more similar the images are\r\n    return emd_distance;\r\n  };\r\n\r\n  calculateSimilarityPercentage = (emdDistance, maxDistance) => {\r\n    // Calculate the similarity percentage\r\n    const similarityPercentage = 100 * (1 - emdDistance / maxDistance);\r\n\r\n    return similarityPercentage;\r\n  };\r\n\r\n  render() {\r\n    // Specify the base64 strings of your two images and the number of colors to extract\r\n    const imageBase64_1 = 'YOUR_BASE64_STRING_1';\r\n    const imageBase64_2 = 'YOUR_BASE64_STRING_2';\r\n    const numColors = 5; // You can change this to the desired number of colors\r\n\r\n    const maxPossibleDistance = 10.0;\r\n\r\n    const similarityScore = this.calculateColorSimilarityFromBase64(\r\n      imageBase64_1,\r\n      imageBase64_2,\r\n      numColors\r\n    );\r\n    console.log(`Similarity Score: ${similarityScore.toFixed(2)}`);\r\n\r\n    const similarityPercentage = this.calculateSimilarityPercentage(similarityScore, maxPossibleDistance);\r\n\r\n    console.log(`Similarity Percentage: ${similarityPercentage.toFixed(2)}%`);\r\n\r\n    return <div>Check the console for the similarity score and percentage.</div>;\r\n  }\r\n}\r\n\r\nexport default ColorExtractor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}